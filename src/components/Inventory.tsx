import { useState } from 'react';
import { usePlayerStore } from '../store/playerStore';
import '../styles/Inventory.css';

interface InventoryProps {
  onClose: () => void;
}

const Inventory = ({ onClose }: InventoryProps) => {
  const inventory = usePlayerStore((state) => state.inventory);
  const [selectedItem, setSelectedItem] = useState<string | null>(null);

  // Group items by type for better organization
  const groupedItems: Record<string, string[]> = {};
  
  inventory.forEach(item => {
    // Extract item category from item string (assuming format like "weapon:pistol")
    const category = item.includes(':') ? item.split(':')[0] : 'misc';
    
    if (!groupedItems[category]) {
      groupedItems[category] = [];
    }
    groupedItems[category].push(item);
  });

  return (
    <div className="inventory-overlay">
      <div className="inventory-container">
        <div className="inventory-header">
          <h2>–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å</h2>
          <button className="close-button" onClick={onClose}>√ó</button>
        </div>
        
        <div className="inventory-content">
          {inventory.length === 0 ? (
            <div className="empty-inventory">
              <p>–í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç.</p>
              <p>–ò—Å—Å–ª–µ–¥—É–π—Ç–µ –ø—É—Å—Ç–æ—à—å, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç—ã.</p>
            </div>
          ) : (
            <div className="inventory-grid">
              {Object.entries(groupedItems).map(([category, items]) => (
                <div key={category} className="item-category">
                  <h3>{getCategoryName(category)}</h3>
                  <div className="items-list">
                    {items.map((item, index) => {
                      const itemName = item.includes(':') ? item.split(':')[1] : item;
                      return (
                        <div 
                          key={`${item}-${index}`}
                          className={`inventory-item ${selectedItem === item ? 'selected' : ''}`}
                          onClick={() => setSelectedItem(item)}
                        >
                          <div className="item-icon">
                            {getItemIcon(item)}
                          </div>
                          <div className="item-name">{formatItemName(itemName)}</div>
                        </div>
                      );
                    })}
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>
        
        {selectedItem && (
          <div className="item-details">
            <h3>{formatItemName(selectedItem.includes(':') ? selectedItem.split(':')[1] : selectedItem)}</h3>
            <p>{getItemDescription(selectedItem)}</p>
            <div className="item-actions">
              <button className="item-action-button">–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å</button>
              <button className="item-action-button">–í—ã–±—Ä–æ—Å–∏—Ç—å</button>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

// Helper functions for displaying item information
function getCategoryName(category: string): string {
  const categories: Record<string, string> = {
    'weapon': '–û—Ä—É–∂–∏–µ',
    'food': '–ï–¥–∞',
    'medical': '–ú–µ–¥–∏–∫–∞–º–µ–Ω—Ç—ã',
    'ammo': '–ë–æ–µ–ø—Ä–∏–ø–∞—Å—ã',
    'misc': '–†–∞–∑–Ω–æ–µ',
    'clothing': '–û–¥–µ–∂–¥–∞',
    'tool': '–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã'
  };
  
  return categories[category] || '–†–∞–∑–Ω–æ–µ';
}

function getItemIcon(item: string): string {
  // Simple icon representation - this could be replaced with actual icon components
  const category = item.includes(':') ? item.split(':')[0] : 'misc';
  
  const icons: Record<string, string> = {
    'weapon': 'üî´',
    'food': 'üçñ',
    'medical': 'üíä',
    'ammo': 'üß®',
    'misc': 'üì¶',
    'clothing': 'üëï',
    'tool': 'üîß'
  };
  
  return icons[category] || 'üì¶';
}

function formatItemName(name: string): string {
  // Convert kebab-case to normal text
  return name
    .split('-')
    .map(word => word.charAt(0).toUpperCase() + word.slice(1))
    .join(' ');
}

function getItemDescription(item: string): string {
  // This would ideally come from a database or store of item details
  const descriptions: Record<string, string> = {
    'weapon:pistol': '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–∏—Å—Ç–æ–ª–µ—Ç. –ù–∞–¥–µ–∂–µ–Ω –∏ –ø—Ä–æ—Å—Ç –≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏.',
    'weapon:rifle': '–í–∏–Ω—Ç–æ–≤–∫–∞ —Å –æ–ø—Ç–∏—á–µ—Å–∫–∏–º –ø—Ä–∏—Ü–µ–ª–æ–º. –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞ –Ω–∞ —Å—Ä–µ–¥–Ω–∏—Ö –¥–∏—Å—Ç–∞–Ω—Ü–∏—è—Ö.',
    'medical:medkit': '–ë–∞–∑–æ–≤—ã–π –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –Ω–∞–±–æ—Ä. –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ.',
    'food:canned-meat': '–ö–æ–Ω—Å–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –º—è—Å–æ. –£—Ç–æ–ª—è–µ—Ç –≥–æ–ª–æ–¥ –∏ –¥–∞–µ—Ç —Å–∏–ª—ã.',
    'food:water': '–û—á–∏—â–µ–Ω–Ω–∞—è –≤–æ–¥–∞. –ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –¥–ª—è –≤—ã–∂–∏–≤–∞–Ω–∏—è.',
    'ammo:pistol': '–ü–∞—Ç—Ä–æ–Ω—ã –¥–ª—è –ø–∏—Å—Ç–æ–ª–µ—Ç–∞. 9–º–º.',
    'tool:flashlight': '–§–æ–Ω–∞—Ä–∏–∫. –ü–æ–º–æ–≥–∞–µ—Ç –≤–∏–¥–µ—Ç—å –≤ —Ç–µ–º–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö.',
  };
  
  return descriptions[item] || '–ü—Ä–µ–¥–º–µ—Ç –∏–∑ –ø—É—Å—Ç–æ—à–∏. –ú–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω.';
}

export default Inventory;
